package ibc_types

import (
	"encoding/hex"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestDecodeConnectionRedeemerSchema(t *testing.T) {
	t.Run("Decode ConnectionRedeemerConnOpenInit Successful", func(t *testing.T) {
		redeemerEncoded := "d8799fd8799f581c887732ce8cbabdb54c8ba09a698c81fe06821d80258c0a8bde2892c44768616e646c6572ffff"
		res, err := DecodeMintConnectionRedeemerSchema(redeemerEncoded)
		require.Equal(t, nil, err)
		require.NotEqual(t, nil, res.Value.(MintConnectionRedeemerConnOpenInit).HandlerAuthToken)
		require.Equal(t, "68616e646c6572", hex.EncodeToString(res.Value.(MintConnectionRedeemerConnOpenInit).HandlerAuthToken.Name))
		require.Equal(t, "887732ce8cbabdb54c8ba09a698c81fe06821d80258c0a8bde2892c4", hex.EncodeToString(res.Value.(MintConnectionRedeemerConnOpenInit).HandlerAuthToken.PolicyId))
	})
	t.Run("Decode ConnectionRedeemerConnOpenTry Successful", func(t *testing.T) {
		redeemerEncoded := "d87a9fd8799f48706f6c69637949644768616e646c6572ffd8799f4763617264616e6fd8799fd8799f0affffd8799fd8799f0affff0a192710d8799fd8799f0a0ad8799fd8799f0a14ffffffff80ffd8799f9fd8799fd8799fd8799f48746573745f6b65794a746573745f76616c7565d8799f0a0a0a0a4b746573745f707265666978ff9fd8799f0a4b746573745f7072656669784b746573745f737566666978ffffffffffffffd8799f9fd8799fd8799fd8799f48746573745f6b65794a746573745f76616c7565d8799f0a0a0a0a4b746573745f707265666978ff9fd8799f0a4b746573745f7072656669784b746573745f737566666978ffffffffffffffd8799f0a0affff"
		res, err := DecodeMintConnectionRedeemerSchema(redeemerEncoded)
		require.Equal(t, nil, err)
		require.Equal(t, ConnOpenTry, res.Type)
		require.NotEqual(t, nil, res.Value.(MintConnectionRedeemerConnOpenTry).ProofInit)
	})
	t.Run("Decode SpendConnectionRedeemerConnOpenAck Successful", func(t *testing.T) {
		redeemerEncoded := "d8799fd8799f423432d8799fd8799f1824ffffd8799fd8799f00ffff091b000188e6d68b0000d8799fd8799f051864d8799fd8799f0d14ffffffff80ffd8799f9fd8799fd8799fd8799f5818636f6e6e656374696f6e732f636f6e6e656374696f6e2d315f58400a16323030302d63617264616e6f2d6d69746872696c2d3112230a0131120d4f524445525f4f524445524544120f4f524445525f554e4f5244455245441802225824230a0c6962635f636c69656e742d39120c636f6e6e656374696f6e2d341a050a03696263ffd8799f01000101440002b822ff9fd8799f01450204b8222058212075c4910f51207d3c65960120fe931f138e2624668d75869f51b8442593dd5eabffd8799f0158260408b82220d06f4befc824c2a1312c15d8d2a16a0d662f99a1974e8f60812be3f80525de832040ffd8799f01450814b8222058212004fa857d82741a2a5f16415fa7c66e28c6f8e4db6111276ce209fd3cfa0e8a93ffd8799f0158260c38b8222026e4875f542a8a9f61b789660365435084627d65a3a309e01cd1ed2c7b38a4842040ffd8799f0158260e5eb82220420bc9be3a7ea5cb27524c26389a013467e9b7e1703f0817ca502e866314f4c82040ffffffffffd8799fd8799fd8799f436962635820345ce6a09761ccc8c07ab46cc0eabb9b2023f17aef0bb5f97754eaecd53645fcd8799f010001014100ff9fd8799f0158210106b99c0d8119ff1edbcbe165d0f19337dbbc080e677c88e57aa2ae767ebf0f0f40ffd8799f0141015820f03e9a3a8125b3030d3da809a5065fb5f4fb91ae04b45c455218f4844614fc48ffd8799f0158210124409a1441553dd16e3e14d0545222d206e3deaf20e7556054ed528c9f5d8eed40ffd8799f0158210172277b2ccc57c5161788574c937fc2706e4f8f6063b29fb0386ebfe7d050f52b40ffd8799f0141015820c089f3f33262c2a6ea128bdff502dbac023497c871491f3c5d9f0365b033b301ffffffffffffffd8799f9fd8799fd8799fd8799f582a636c69656e74732f323030302d63617264616e6f2d6d69746872696c2d312f636c69656e7453746174655f58400a232f6962632e636c69656e74732e6d69746872696c2e76312e436c69656e745374617465121e0a023432120208241a0020092a040880af1a320a080510641a4504080d1014ffd8799f01000101440002921fff9fd8799f01450204b8222058212059328083ce8a80a88ca5a4b4a86796373b2dc5e4f5a69ff8b8c3ac1ac3eaad63ffd8799f01450408b822205821203abae75e9b878f1dd034091549aae4a0bc8ad46e08ee52d201a069f2471ffafbffd8799f01450816b82220582120949dae652df10b039187aaf1a598897812a6c5377129aff1de152083a4024ed6ffd8799f0158260a24b822207c28b137c990a54dfcc520ae6b19c17738a75502bcf05acd830ffd1ede1557e32040ffd8799f01450c38b82220582120088b4cc7c030c8ef85858559688b9a3cfaf006cb877cd6d61514cd479216dc81ffd8799f0158260e5eb82220420bc9be3a7ea5cb27524c26389a013467e9b7e1703f0817ca502e866314f4c82040ffffffffffd8799fd8799fd8799f436962635820345ce6a09761ccc8c07ab46cc0eabb9b2023f17aef0bb5f97754eaecd53645fcd8799f010001014100ff9fd8799f0158210106b99c0d8119ff1edbcbe165d0f19337dbbc080e677c88e57aa2ae767ebf0f0f40ffd8799f0141015820f03e9a3a8125b3030d3da809a5065fb5f4fb91ae04b45c455218f4844614fc48ffd8799f0158210124409a1441553dd16e3e14d0545222d206e3deaf20e7556054ed528c9f5d8eed40ffd8799f0158210172277b2ccc57c5161788574c937fc2706e4f8f6063b29fb0386ebfe7d050f52b40ffd8799f0141015820c089f3f33262c2a6ea128bdff502dbac023497c871491f3c5d9f0365b033b301ffffffffffffffd8799f0019089dffff"
		res, err := DecodeSpendConnectionRedeemerSchema(redeemerEncoded)
		require.Equal(t, nil, err)
		require.Equal(t, ConnOpenAck, res.Type)
		require.NotEqual(t, nil, res.Value.(SpendConnectionRedeemerConnOpenAck).ProofTry)
	})
}
