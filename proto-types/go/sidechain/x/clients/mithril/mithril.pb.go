// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: ibc/lightclients/mithril/mithril.proto

package mithril

import (
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtocolMessagePartKey int32

const (
	ProtocolMessagePartKey_SNAPSHOT_DIGEST                  ProtocolMessagePartKey = 0
	ProtocolMessagePartKey_CARDANO_TRANSACTIONS_MERKLE_ROOT ProtocolMessagePartKey = 1
	ProtocolMessagePartKey_NEXT_AGGREGATE_VERIFICATION_KEY  ProtocolMessagePartKey = 2
	ProtocolMessagePartKey_LATEST_IMMUTABLE_FILE_NUMBER     ProtocolMessagePartKey = 3
)

// Enum value maps for ProtocolMessagePartKey.
var (
	ProtocolMessagePartKey_name = map[int32]string{
		0: "SNAPSHOT_DIGEST",
		1: "CARDANO_TRANSACTIONS_MERKLE_ROOT",
		2: "NEXT_AGGREGATE_VERIFICATION_KEY",
		3: "LATEST_IMMUTABLE_FILE_NUMBER",
	}
	ProtocolMessagePartKey_value = map[string]int32{
		"SNAPSHOT_DIGEST":                  0,
		"CARDANO_TRANSACTIONS_MERKLE_ROOT": 1,
		"NEXT_AGGREGATE_VERIFICATION_KEY":  2,
		"LATEST_IMMUTABLE_FILE_NUMBER":     3,
	}
)

func (x ProtocolMessagePartKey) Enum() *ProtocolMessagePartKey {
	p := new(ProtocolMessagePartKey)
	*p = x
	return p
}

func (x ProtocolMessagePartKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolMessagePartKey) Descriptor() protoreflect.EnumDescriptor {
	return file_ibc_lightclients_mithril_mithril_proto_enumTypes[0].Descriptor()
}

func (ProtocolMessagePartKey) Type() protoreflect.EnumType {
	return &file_ibc_lightclients_mithril_mithril_proto_enumTypes[0]
}

func (x ProtocolMessagePartKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolMessagePartKey.Descriptor instead.
func (ProtocolMessagePartKey) EnumDescriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{0}
}

type SignedEntityType int32

const (
	SignedEntityType_MITHRIL_STAKE_DISTRIBUTION SignedEntityType = 0
	SignedEntityType_CARDANO_TRANSACTIONS       SignedEntityType = 1
)

// Enum value maps for SignedEntityType.
var (
	SignedEntityType_name = map[int32]string{
		0: "MITHRIL_STAKE_DISTRIBUTION",
		1: "CARDANO_TRANSACTIONS",
	}
	SignedEntityType_value = map[string]int32{
		"MITHRIL_STAKE_DISTRIBUTION": 0,
		"CARDANO_TRANSACTIONS":       1,
	}
)

func (x SignedEntityType) Enum() *SignedEntityType {
	p := new(SignedEntityType)
	*p = x
	return p
}

func (x SignedEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignedEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_ibc_lightclients_mithril_mithril_proto_enumTypes[1].Descriptor()
}

func (SignedEntityType) Type() protoreflect.EnumType {
	return &file_ibc_lightclients_mithril_mithril_proto_enumTypes[1]
}

func (x SignedEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignedEntityType.Descriptor instead.
func (SignedEntityType) EnumDescriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{1}
}

type CertificateSignature int32

const (
	CertificateSignature_GENESIS_SIGNATURE CertificateSignature = 0
	CertificateSignature_MULTI_SIGNATURE   CertificateSignature = 1
)

// Enum value maps for CertificateSignature.
var (
	CertificateSignature_name = map[int32]string{
		0: "GENESIS_SIGNATURE",
		1: "MULTI_SIGNATURE",
	}
	CertificateSignature_value = map[string]int32{
		"GENESIS_SIGNATURE": 0,
		"MULTI_SIGNATURE":   1,
	}
)

func (x CertificateSignature) Enum() *CertificateSignature {
	p := new(CertificateSignature)
	*p = x
	return p
}

func (x CertificateSignature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateSignature) Descriptor() protoreflect.EnumDescriptor {
	return file_ibc_lightclients_mithril_mithril_proto_enumTypes[2].Descriptor()
}

func (CertificateSignature) Type() protoreflect.EnumType {
	return &file_ibc_lightclients_mithril_mithril_proto_enumTypes[2]
}

func (x CertificateSignature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateSignature.Descriptor instead.
func (CertificateSignature) EnumDescriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{2}
}

type Height struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the immutable file number
	MithrilHeight uint64 `protobuf:"varint,1,opt,name=mithril_height,json=mithrilHeight,proto3" json:"mithril_height,omitempty"`
}

func (x *Height) Reset() {
	*x = Height{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Height) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Height) ProtoMessage() {}

func (x *Height) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Height.ProtoReflect.Descriptor instead.
func (*Height) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{0}
}

func (x *Height) GetMithrilHeight() uint64 {
	if x != nil {
		return x.MithrilHeight
	}
	return 0
}

type ClientState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chain id
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Latest height the client was updated to
	LatestHeight *Height `protobuf:"bytes,2,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height,omitempty"`
	// Block height when the client was frozen due to a misbehaviour
	FrozenHeight *Height `protobuf:"bytes,3,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"`
	// Epoch number of current chain state
	CurrentEpoch       uint64                     `protobuf:"varint,4,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	TrustingPeriod     *durationpb.Duration       `protobuf:"bytes,5,opt,name=trusting_period,json=trustingPeriod,proto3" json:"trusting_period,omitempty"`
	ProtocolParameters *MithrilProtocolParameters `protobuf:"bytes,6,opt,name=protocol_parameters,json=protocolParameters,proto3" json:"protocol_parameters,omitempty"`
	// Path at which next upgraded client will be committed.
	UpgradePath []string `protobuf:"bytes,7,rep,name=upgrade_path,json=upgradePath,proto3" json:"upgrade_path,omitempty"`
}

func (x *ClientState) Reset() {
	*x = ClientState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientState) ProtoMessage() {}

func (x *ClientState) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientState.ProtoReflect.Descriptor instead.
func (*ClientState) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{1}
}

func (x *ClientState) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ClientState) GetLatestHeight() *Height {
	if x != nil {
		return x.LatestHeight
	}
	return nil
}

func (x *ClientState) GetFrozenHeight() *Height {
	if x != nil {
		return x.FrozenHeight
	}
	return nil
}

func (x *ClientState) GetCurrentEpoch() uint64 {
	if x != nil {
		return x.CurrentEpoch
	}
	return 0
}

func (x *ClientState) GetTrustingPeriod() *durationpb.Duration {
	if x != nil {
		return x.TrustingPeriod
	}
	return nil
}

func (x *ClientState) GetProtocolParameters() *MithrilProtocolParameters {
	if x != nil {
		return x.ProtocolParameters
	}
	return nil
}

func (x *ClientState) GetUpgradePath() []string {
	if x != nil {
		return x.UpgradePath
	}
	return nil
}

type ConsensusState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// First certificate hash of latest epoch of mithril stake distribution
	FcHashLatestEpochMsd string `protobuf:"bytes,2,opt,name=fc_hash_latest_epoch_msd,json=fcHashLatestEpochMsd,proto3" json:"fc_hash_latest_epoch_msd,omitempty"`
	// Latest certificate hash of mithril stake distribution
	LatestCertHashMsd string `protobuf:"bytes,3,opt,name=latest_cert_hash_msd,json=latestCertHashMsd,proto3" json:"latest_cert_hash_msd,omitempty"`
	// First certificate hash of latest epoch of transaction snapshot
	FcHashLatestEpochTs string `protobuf:"bytes,4,opt,name=fc_hash_latest_epoch_ts,json=fcHashLatestEpochTs,proto3" json:"fc_hash_latest_epoch_ts,omitempty"`
	// Latest certificate hash of transaction snapshot
	LatestCertHashTs string `protobuf:"bytes,5,opt,name=latest_cert_hash_ts,json=latestCertHashTs,proto3" json:"latest_cert_hash_ts,omitempty"`
}

func (x *ConsensusState) Reset() {
	*x = ConsensusState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusState) ProtoMessage() {}

func (x *ConsensusState) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusState.ProtoReflect.Descriptor instead.
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{2}
}

func (x *ConsensusState) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ConsensusState) GetFcHashLatestEpochMsd() string {
	if x != nil {
		return x.FcHashLatestEpochMsd
	}
	return ""
}

func (x *ConsensusState) GetLatestCertHashMsd() string {
	if x != nil {
		return x.LatestCertHashMsd
	}
	return ""
}

func (x *ConsensusState) GetFcHashLatestEpochTs() string {
	if x != nil {
		return x.FcHashLatestEpochTs
	}
	return ""
}

func (x *ConsensusState) GetLatestCertHashTs() string {
	if x != nil {
		return x.LatestCertHashTs
	}
	return ""
}

type Misbehaviour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClientID is deprecated
	//
	// Deprecated: Marked as deprecated in ibc/lightclients/mithril/mithril.proto.
	ClientId        string         `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	MithrilHeader_1 *MithrilHeader `protobuf:"bytes,2,opt,name=mithril_header_1,json=mithrilHeader1,proto3" json:"mithril_header_1,omitempty"`
	MithrilHeader_2 *MithrilHeader `protobuf:"bytes,3,opt,name=mithril_header_2,json=mithrilHeader2,proto3" json:"mithril_header_2,omitempty"`
}

func (x *Misbehaviour) Reset() {
	*x = Misbehaviour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Misbehaviour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Misbehaviour) ProtoMessage() {}

func (x *Misbehaviour) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Misbehaviour.ProtoReflect.Descriptor instead.
func (*Misbehaviour) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Marked as deprecated in ibc/lightclients/mithril/mithril.proto.
func (x *Misbehaviour) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Misbehaviour) GetMithrilHeader_1() *MithrilHeader {
	if x != nil {
		return x.MithrilHeader_1
	}
	return nil
}

func (x *Misbehaviour) GetMithrilHeader_2() *MithrilHeader {
	if x != nil {
		return x.MithrilHeader_2
	}
	return nil
}

type MithrilHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MithrilStakeDistribution            *MithrilStakeDistribution   `protobuf:"bytes,1,opt,name=mithril_stake_distribution,json=mithrilStakeDistribution,proto3" json:"mithril_stake_distribution,omitempty"`
	MithrilStakeDistributionCertificate *MithrilCertificate         `protobuf:"bytes,2,opt,name=mithril_stake_distribution_certificate,json=mithrilStakeDistributionCertificate,proto3" json:"mithril_stake_distribution_certificate,omitempty"`
	TransactionSnapshot                 *CardanoTransactionSnapshot `protobuf:"bytes,3,opt,name=transaction_snapshot,json=transactionSnapshot,proto3" json:"transaction_snapshot,omitempty"`
	TransactionSnapshotCertificate      *MithrilCertificate         `protobuf:"bytes,4,opt,name=transaction_snapshot_certificate,json=transactionSnapshotCertificate,proto3" json:"transaction_snapshot_certificate,omitempty"`
}

func (x *MithrilHeader) Reset() {
	*x = MithrilHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MithrilHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MithrilHeader) ProtoMessage() {}

func (x *MithrilHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MithrilHeader.ProtoReflect.Descriptor instead.
func (*MithrilHeader) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{4}
}

func (x *MithrilHeader) GetMithrilStakeDistribution() *MithrilStakeDistribution {
	if x != nil {
		return x.MithrilStakeDistribution
	}
	return nil
}

func (x *MithrilHeader) GetMithrilStakeDistributionCertificate() *MithrilCertificate {
	if x != nil {
		return x.MithrilStakeDistributionCertificate
	}
	return nil
}

func (x *MithrilHeader) GetTransactionSnapshot() *CardanoTransactionSnapshot {
	if x != nil {
		return x.TransactionSnapshot
	}
	return nil
}

func (x *MithrilHeader) GetTransactionSnapshotCertificate() *MithrilCertificate {
	if x != nil {
		return x.TransactionSnapshotCertificate
	}
	return nil
}

type MithrilStakeDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch             uint64                     `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SignersWithStake  []*SignerWithStake         `protobuf:"bytes,2,rep,name=signers_with_stake,json=signersWithStake,proto3" json:"signers_with_stake,omitempty"`
	Hash              string                     `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	CertificateHash   string                     `protobuf:"bytes,4,opt,name=certificate_hash,json=certificateHash,proto3" json:"certificate_hash,omitempty"`
	CreatedAt         uint64                     `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ProtocolParameter *MithrilProtocolParameters `protobuf:"bytes,6,opt,name=protocol_parameter,json=protocolParameter,proto3" json:"protocol_parameter,omitempty"`
}

func (x *MithrilStakeDistribution) Reset() {
	*x = MithrilStakeDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MithrilStakeDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MithrilStakeDistribution) ProtoMessage() {}

func (x *MithrilStakeDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MithrilStakeDistribution.ProtoReflect.Descriptor instead.
func (*MithrilStakeDistribution) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{5}
}

func (x *MithrilStakeDistribution) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MithrilStakeDistribution) GetSignersWithStake() []*SignerWithStake {
	if x != nil {
		return x.SignersWithStake
	}
	return nil
}

func (x *MithrilStakeDistribution) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *MithrilStakeDistribution) GetCertificateHash() string {
	if x != nil {
		return x.CertificateHash
	}
	return ""
}

func (x *MithrilStakeDistribution) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MithrilStakeDistribution) GetProtocolParameter() *MithrilProtocolParameters {
	if x != nil {
		return x.ProtocolParameter
	}
	return nil
}

type CardanoTransactionSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotHash    string  `protobuf:"bytes,1,opt,name=snapshot_hash,json=snapshotHash,proto3" json:"snapshot_hash,omitempty"`
	MerkleRoot      string  `protobuf:"bytes,2,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	CertificateHash string  `protobuf:"bytes,3,opt,name=certificate_hash,json=certificateHash,proto3" json:"certificate_hash,omitempty"`
	Epoch           uint64  `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Height          *Height `protobuf:"bytes,5,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *CardanoTransactionSnapshot) Reset() {
	*x = CardanoTransactionSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTransactionSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTransactionSnapshot) ProtoMessage() {}

func (x *CardanoTransactionSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTransactionSnapshot.ProtoReflect.Descriptor instead.
func (*CardanoTransactionSnapshot) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{6}
}

func (x *CardanoTransactionSnapshot) GetSnapshotHash() string {
	if x != nil {
		return x.SnapshotHash
	}
	return ""
}

func (x *CardanoTransactionSnapshot) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *CardanoTransactionSnapshot) GetCertificateHash() string {
	if x != nil {
		return x.CertificateHash
	}
	return ""
}

func (x *CardanoTransactionSnapshot) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CardanoTransactionSnapshot) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

type MithrilCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash                     string               `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	PreviousHash             string               `protobuf:"bytes,2,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	Epoch                    uint64               `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SignedEntityType         SignedEntityType     `protobuf:"varint,4,opt,name=signed_entity_type,json=signedEntityType,proto3,enum=ibc.clients.mithril.v1.SignedEntityType" json:"signed_entity_type,omitempty"`
	Metadata                 *CertificateMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ProtocolMessage          *ProtocolMessage     `protobuf:"bytes,6,opt,name=protocol_message,json=protocolMessage,proto3" json:"protocol_message,omitempty"`
	SignedMessage            string               `protobuf:"bytes,7,opt,name=signed_message,json=signedMessage,proto3" json:"signed_message,omitempty"`
	AggregateVerificationKey string               `protobuf:"bytes,8,opt,name=aggregate_verification_key,json=aggregateVerificationKey,proto3" json:"aggregate_verification_key,omitempty"`
	Signature                CertificateSignature `protobuf:"varint,9,opt,name=signature,proto3,enum=ibc.clients.mithril.v1.CertificateSignature" json:"signature,omitempty"`
}

func (x *MithrilCertificate) Reset() {
	*x = MithrilCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MithrilCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MithrilCertificate) ProtoMessage() {}

func (x *MithrilCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MithrilCertificate.ProtoReflect.Descriptor instead.
func (*MithrilCertificate) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{7}
}

func (x *MithrilCertificate) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *MithrilCertificate) GetPreviousHash() string {
	if x != nil {
		return x.PreviousHash
	}
	return ""
}

func (x *MithrilCertificate) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MithrilCertificate) GetSignedEntityType() SignedEntityType {
	if x != nil {
		return x.SignedEntityType
	}
	return SignedEntityType_MITHRIL_STAKE_DISTRIBUTION
}

func (x *MithrilCertificate) GetMetadata() *CertificateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MithrilCertificate) GetProtocolMessage() *ProtocolMessage {
	if x != nil {
		return x.ProtocolMessage
	}
	return nil
}

func (x *MithrilCertificate) GetSignedMessage() string {
	if x != nil {
		return x.SignedMessage
	}
	return ""
}

func (x *MithrilCertificate) GetAggregateVerificationKey() string {
	if x != nil {
		return x.AggregateVerificationKey
	}
	return ""
}

func (x *MithrilCertificate) GetSignature() CertificateSignature {
	if x != nil {
		return x.Signature
	}
	return CertificateSignature_GENESIS_SIGNATURE
}

type CertificateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion    string                     `protobuf:"bytes,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	ProtocolParameters *MithrilProtocolParameters `protobuf:"bytes,2,opt,name=protocol_parameters,json=protocolParameters,proto3" json:"protocol_parameters,omitempty"`
	InitiatedAt        uint64                     `protobuf:"varint,3,opt,name=initiatedAt,proto3" json:"initiatedAt,omitempty"`
	SealedAt           uint64                     `protobuf:"varint,4,opt,name=sealedAt,proto3" json:"sealedAt,omitempty"`
	Signers            []*SignerWithStake         `protobuf:"bytes,5,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *CertificateMetadata) Reset() {
	*x = CertificateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateMetadata) ProtoMessage() {}

func (x *CertificateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateMetadata.ProtoReflect.Descriptor instead.
func (*CertificateMetadata) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{8}
}

func (x *CertificateMetadata) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *CertificateMetadata) GetProtocolParameters() *MithrilProtocolParameters {
	if x != nil {
		return x.ProtocolParameters
	}
	return nil
}

func (x *CertificateMetadata) GetInitiatedAt() uint64 {
	if x != nil {
		return x.InitiatedAt
	}
	return 0
}

func (x *CertificateMetadata) GetSealedAt() uint64 {
	if x != nil {
		return x.SealedAt
	}
	return 0
}

func (x *CertificateMetadata) GetSigners() []*SignerWithStake {
	if x != nil {
		return x.Signers
	}
	return nil
}

type SignerWithStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	Stake   uint64 `protobuf:"varint,2,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (x *SignerWithStake) Reset() {
	*x = SignerWithStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignerWithStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignerWithStake) ProtoMessage() {}

func (x *SignerWithStake) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignerWithStake.ProtoReflect.Descriptor instead.
func (*SignerWithStake) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{9}
}

func (x *SignerWithStake) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *SignerWithStake) GetStake() uint64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

type ProtocolMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolMessagePartKey   ProtocolMessagePartKey `protobuf:"varint,1,opt,name=protocol_message_part_key,json=protocolMessagePartKey,proto3,enum=ibc.clients.mithril.v1.ProtocolMessagePartKey" json:"protocol_message_part_key,omitempty"`
	ProtocolMessagePartValue string                 `protobuf:"bytes,2,opt,name=protocol_message_part_value,json=protocolMessagePartValue,proto3" json:"protocol_message_part_value,omitempty"`
}

func (x *ProtocolMessage) Reset() {
	*x = ProtocolMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolMessage) ProtoMessage() {}

func (x *ProtocolMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolMessage.ProtoReflect.Descriptor instead.
func (*ProtocolMessage) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{10}
}

func (x *ProtocolMessage) GetProtocolMessagePartKey() ProtocolMessagePartKey {
	if x != nil {
		return x.ProtocolMessagePartKey
	}
	return ProtocolMessagePartKey_SNAPSHOT_DIGEST
}

func (x *ProtocolMessage) GetProtocolMessagePartValue() string {
	if x != nil {
		return x.ProtocolMessagePartValue
	}
	return ""
}

type MithrilProtocolParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quorum parameter
	K uint64 `protobuf:"varint,1,opt,name=k,proto3" json:"k,omitempty"`
	// Security parameter (number of lotteries)
	M uint64 `protobuf:"varint,2,opt,name=m,proto3" json:"m,omitempty"`
	// f in phi(w) = 1 - (1 - f)^w, where w is the stake of a participant
	PhiF uint64 `protobuf:"varint,3,opt,name=phi_f,json=phiF,proto3" json:"phi_f,omitempty"`
}

func (x *MithrilProtocolParameters) Reset() {
	*x = MithrilProtocolParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MithrilProtocolParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MithrilProtocolParameters) ProtoMessage() {}

func (x *MithrilProtocolParameters) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_mithril_mithril_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MithrilProtocolParameters.ProtoReflect.Descriptor instead.
func (*MithrilProtocolParameters) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP(), []int{11}
}

func (x *MithrilProtocolParameters) GetK() uint64 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *MithrilProtocolParameters) GetM() uint64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *MithrilProtocolParameters) GetPhiF() uint64 {
	if x != nil {
		return x.PhiF
	}
	return 0
}

var File_ibc_lightclients_mithril_mithril_proto protoreflect.FileDescriptor

var file_ibc_lightclients_mithril_mithril_proto_rawDesc = []byte{
	0x0a, 0x26, 0x69, 0x62, 0x63, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2f, 0x6d, 0x69, 0x74, 0x68, 0x72,
	0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31,
	0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69,
	0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f,
	0x00, 0x22, 0xb2, 0x03, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x43, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x0f, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0xc8, 0xde, 0x1f, 0x00, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x62, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x82, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x18, 0x66, 0x63, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x6d, 0x73, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x63, 0x48, 0x61, 0x73,
	0x68, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x73, 0x64, 0x12,
	0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x6d, 0x73, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x73, 0x64,
	0x12, 0x34, 0x0a, 0x17, 0x66, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x66, 0x63, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x54, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x54, 0x73, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0xff, 0x01, 0x0a, 0x0c,
	0x4d, 0x69, 0x73, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x12, 0x1f, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a,
	0x10, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x12,
	0xe2, 0xde, 0x1f, 0x0e, 0x4d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x31, 0x52, 0x0e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x31, 0x12, 0x63, 0x0a, 0x10, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69,
	0x62, 0x63, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72,
	0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x42, 0x12, 0xe2, 0xde, 0x1f, 0x0e, 0x4d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x32, 0x52, 0x0e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x32, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0xe3, 0x03,
	0x0a, 0x0d, 0x4d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x6e, 0x0a, 0x1a, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x74,
	0x68, 0x72, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x7f, 0x0a, 0x26, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69,
	0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x23, 0x6d, 0x69, 0x74,
	0x68, 0x72, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x65, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74,
	0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x74, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x74, 0x68, 0x72,
	0x69, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x1e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3a, 0x04, 0x88,
	0xa0, 0x1f, 0x00, 0x22, 0xcd, 0x02, 0x0a, 0x18, 0x4d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x55, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x10, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x60, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x3a, 0x04, 0x88,
	0xa0, 0x1f, 0x00, 0x22, 0xe1, 0x01, 0x0a, 0x1a, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x8f, 0x04, 0x0a, 0x12, 0x4d, 0x69, 0x74, 0x68,
	0x72, 0x69, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x56, 0x0a,
	0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x52,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x69, 0x62, 0x63,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0xab, 0x02, 0x0a, 0x13, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41,
	0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69,
	0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x73, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x48, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x04, 0x88, 0xa0, 0x1f,
	0x00, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x52, 0x0a, 0x19, 0x4d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x6b,
	0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x6d, 0x12, 0x13,
	0x0a, 0x05, 0x70, 0x68, 0x69, 0x5f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70,
	0x68, 0x69, 0x46, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x2a, 0xa0, 0x01, 0x0a, 0x16, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x5f, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x41, 0x52,
	0x44, 0x41, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x4d, 0x45, 0x52, 0x4b, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x01, 0x12,
	0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x49,
	0x4d, 0x4d, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0x52, 0x0a, 0x10,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x49, 0x54, 0x48, 0x52, 0x49, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4b,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x52, 0x44, 0x41, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x01, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00,
	0x2a, 0x48, 0x0a, 0x14, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x4e, 0x45,
	0x53, 0x49, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x78, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x6d, 0x69, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ibc_lightclients_mithril_mithril_proto_rawDescOnce sync.Once
	file_ibc_lightclients_mithril_mithril_proto_rawDescData = file_ibc_lightclients_mithril_mithril_proto_rawDesc
)

func file_ibc_lightclients_mithril_mithril_proto_rawDescGZIP() []byte {
	file_ibc_lightclients_mithril_mithril_proto_rawDescOnce.Do(func() {
		file_ibc_lightclients_mithril_mithril_proto_rawDescData = protoimpl.X.CompressGZIP(file_ibc_lightclients_mithril_mithril_proto_rawDescData)
	})
	return file_ibc_lightclients_mithril_mithril_proto_rawDescData
}

var file_ibc_lightclients_mithril_mithril_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ibc_lightclients_mithril_mithril_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ibc_lightclients_mithril_mithril_proto_goTypes = []interface{}{
	(ProtocolMessagePartKey)(0),        // 0: ibc.clients.mithril.v1.ProtocolMessagePartKey
	(SignedEntityType)(0),              // 1: ibc.clients.mithril.v1.SignedEntityType
	(CertificateSignature)(0),          // 2: ibc.clients.mithril.v1.CertificateSignature
	(*Height)(nil),                     // 3: ibc.clients.mithril.v1.Height
	(*ClientState)(nil),                // 4: ibc.clients.mithril.v1.ClientState
	(*ConsensusState)(nil),             // 5: ibc.clients.mithril.v1.ConsensusState
	(*Misbehaviour)(nil),               // 6: ibc.clients.mithril.v1.Misbehaviour
	(*MithrilHeader)(nil),              // 7: ibc.clients.mithril.v1.MithrilHeader
	(*MithrilStakeDistribution)(nil),   // 8: ibc.clients.mithril.v1.MithrilStakeDistribution
	(*CardanoTransactionSnapshot)(nil), // 9: ibc.clients.mithril.v1.CardanoTransactionSnapshot
	(*MithrilCertificate)(nil),         // 10: ibc.clients.mithril.v1.MithrilCertificate
	(*CertificateMetadata)(nil),        // 11: ibc.clients.mithril.v1.CertificateMetadata
	(*SignerWithStake)(nil),            // 12: ibc.clients.mithril.v1.SignerWithStake
	(*ProtocolMessage)(nil),            // 13: ibc.clients.mithril.v1.ProtocolMessage
	(*MithrilProtocolParameters)(nil),  // 14: ibc.clients.mithril.v1.MithrilProtocolParameters
	(*durationpb.Duration)(nil),        // 15: google.protobuf.Duration
}
var file_ibc_lightclients_mithril_mithril_proto_depIdxs = []int32{
	3,  // 0: ibc.clients.mithril.v1.ClientState.latest_height:type_name -> ibc.clients.mithril.v1.Height
	3,  // 1: ibc.clients.mithril.v1.ClientState.frozen_height:type_name -> ibc.clients.mithril.v1.Height
	15, // 2: ibc.clients.mithril.v1.ClientState.trusting_period:type_name -> google.protobuf.Duration
	14, // 3: ibc.clients.mithril.v1.ClientState.protocol_parameters:type_name -> ibc.clients.mithril.v1.MithrilProtocolParameters
	7,  // 4: ibc.clients.mithril.v1.Misbehaviour.mithril_header_1:type_name -> ibc.clients.mithril.v1.MithrilHeader
	7,  // 5: ibc.clients.mithril.v1.Misbehaviour.mithril_header_2:type_name -> ibc.clients.mithril.v1.MithrilHeader
	8,  // 6: ibc.clients.mithril.v1.MithrilHeader.mithril_stake_distribution:type_name -> ibc.clients.mithril.v1.MithrilStakeDistribution
	10, // 7: ibc.clients.mithril.v1.MithrilHeader.mithril_stake_distribution_certificate:type_name -> ibc.clients.mithril.v1.MithrilCertificate
	9,  // 8: ibc.clients.mithril.v1.MithrilHeader.transaction_snapshot:type_name -> ibc.clients.mithril.v1.CardanoTransactionSnapshot
	10, // 9: ibc.clients.mithril.v1.MithrilHeader.transaction_snapshot_certificate:type_name -> ibc.clients.mithril.v1.MithrilCertificate
	12, // 10: ibc.clients.mithril.v1.MithrilStakeDistribution.signers_with_stake:type_name -> ibc.clients.mithril.v1.SignerWithStake
	14, // 11: ibc.clients.mithril.v1.MithrilStakeDistribution.protocol_parameter:type_name -> ibc.clients.mithril.v1.MithrilProtocolParameters
	3,  // 12: ibc.clients.mithril.v1.CardanoTransactionSnapshot.height:type_name -> ibc.clients.mithril.v1.Height
	1,  // 13: ibc.clients.mithril.v1.MithrilCertificate.signed_entity_type:type_name -> ibc.clients.mithril.v1.SignedEntityType
	11, // 14: ibc.clients.mithril.v1.MithrilCertificate.metadata:type_name -> ibc.clients.mithril.v1.CertificateMetadata
	13, // 15: ibc.clients.mithril.v1.MithrilCertificate.protocol_message:type_name -> ibc.clients.mithril.v1.ProtocolMessage
	2,  // 16: ibc.clients.mithril.v1.MithrilCertificate.signature:type_name -> ibc.clients.mithril.v1.CertificateSignature
	14, // 17: ibc.clients.mithril.v1.CertificateMetadata.protocol_parameters:type_name -> ibc.clients.mithril.v1.MithrilProtocolParameters
	12, // 18: ibc.clients.mithril.v1.CertificateMetadata.signers:type_name -> ibc.clients.mithril.v1.SignerWithStake
	0,  // 19: ibc.clients.mithril.v1.ProtocolMessage.protocol_message_part_key:type_name -> ibc.clients.mithril.v1.ProtocolMessagePartKey
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_ibc_lightclients_mithril_mithril_proto_init() }
func file_ibc_lightclients_mithril_mithril_proto_init() {
	if File_ibc_lightclients_mithril_mithril_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Height); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Misbehaviour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MithrilHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MithrilStakeDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTransactionSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MithrilCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignerWithStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_mithril_mithril_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MithrilProtocolParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ibc_lightclients_mithril_mithril_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ibc_lightclients_mithril_mithril_proto_goTypes,
		DependencyIndexes: file_ibc_lightclients_mithril_mithril_proto_depIdxs,
		EnumInfos:         file_ibc_lightclients_mithril_mithril_proto_enumTypes,
		MessageInfos:      file_ibc_lightclients_mithril_mithril_proto_msgTypes,
	}.Build()
	File_ibc_lightclients_mithril_mithril_proto = out.File
	file_ibc_lightclients_mithril_mithril_proto_rawDesc = nil
	file_ibc_lightclients_mithril_mithril_proto_goTypes = nil
	file_ibc_lightclients_mithril_mithril_proto_depIdxs = nil
}
