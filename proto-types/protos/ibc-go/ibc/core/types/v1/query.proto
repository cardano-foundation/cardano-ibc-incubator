syntax = "proto3";

package ibc.core.types.v1;

option go_package = "github.com/cosmos/ibc-go/v7/modules/core/types";

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "ibc/core/types/v1/block.proto";

// Query provides defines the gRPC querier service
service Query {
  rpc BlockResults(QueryBlockResultsRequest) returns (QueryBlockResultsResponse) {
    option (google.api.http).get = "/ibc/core/types/v1/block_results";
  }
  rpc BlockSearch(QueryBlockSearchRequest) returns (QueryBlockSearchResponse) {
    option (google.api.http).get = "/ibc/core/types/v1/block_results";
  }
  rpc TransactionByHash(QueryTransactionByHashRequest) returns (QueryTransactionByHashResponse) {
    option (google.api.http).get = "/ibc/core/types/v1/transaction_by_hash";
  }
}

// QueryBlockResultsRequest is the request type for the Query/BlockResults RPC method.
message QueryBlockResultsRequest {
  uint64 height = 1;
}

// QueryBlockResultsResponse is the response type for the Query/BlockResults RPC method.
message QueryBlockResultsResponse {
  // params defines the parameters of the module.
  ResultBlockResults block_results = 1;
}

// QueryBlockSearchRequest is the request type for the Query/BlockSearch RPC method.
message QueryBlockSearchRequest {
  string packet_src_channel = 1 [(gogoproto.nullable) = true];
  string packet_dst_channel = 2 [(gogoproto.nullable) = true];
  string packet_sequence = 3;
  uint64 limit = 4;
  uint64 page = 5;
}

// QueryBlockSearchResponse is the response type for the Query/BlockSearch RPC method.
message QueryBlockSearchResponse {
  // params defines the parameters of the module.
  repeated  ResultBlockSearch blocks = 1;
	uint64    total_count              = 2;
}

// QueryTransactionByHashRequest is the response type for the Query/BlockSearch RPC method.
message QueryTransactionByHashRequest {
  string hash = 1; // Transaction hash in hex format
}

message QueryTransactionByHashResponse {
  string hash = 1; // Whether the transaction existed on the blockchain
  uint64 height = 2;
  uint64 gas_fee = 3;
  uint64 tx_size = 4;
  repeated Event events = 5;
}
